#!/usr/bin/sage


import random

SIZE = 1024

SIZE_M_GMP = SIZE

SIZE_M_512 = 1040

wordsize = 52

M_GMP = 2**SIZE_M_GMP

M_512 = 2**SIZE_M_512

M_w = 2**wordsize

n = random.randint(2**SIZE_M_GMP//2,2**SIZE_M_GMP-1)

t=SIZE_M_512//wordsize


def blockmont(A, B, n_prime,n):
	T=0
	for i in range(t):
		T += ((A>>(i*52))%M_w)*int(B)
		#print("T ="+hex(T))
		Q = (T*int(n_prime))%int(M_w)
		
		#print("T+QN ="+hex(T+Q*n))

		T = (T+Q*n)//M_w
		#print("C_gmp =",hex(T))
	return T

#n+=(n-1)%2

print("M_GMP =",hex(M_GMP), hex(2**SIZE//2))

#print("n =",n)

#n=next_prime(n)
	
#n=int(0xE53B969C5BC03E87044C81CB5D51981F0539F5579A727B6A44B89CA23E199EDF70325A3FFD3E100764ED922A056132626722EF8B91C15BCF14A59D03C0E3A87BEC59EE6950EC2E5F0338A5B66FC89A11F4B1A7BCEF663A2CA251D40FB61BB81727CA5FF814664D2DD6D07EBC63379638EF81F00C420F024E8B487CDD846768FF)

#n=103620093203496370727261360994109075262312063022575872152499885113554673369441017201090018678385632649060805706851887639888737651045820758677284193703764980638472926677224861525610954431800543852467060668774394463727482816880847671286752112301477453159067742837950551302309426870531284885478039887524041003639

#n = 157418550878241187639261479241803639306666714317106610484945432144562069911038467230631515423932011545955210977860746032561156524274661664694525356306414572017895245127965811579183041791568369315362256714061165612265568416475069346602647590511545513475425583944379059130971734705033937251256283809154696622551



n= 160972723171927582036369470573692317882263962264289327436117600647933834794071866355922995136221208373337063877139397174973541404699202479287894558737716315582156334754518576793758100380299484377545065602641280293746051310251117840035811339003898374190247020819416562412661784556177781523553136791098583640319



F = IntegerModRing(M_GMP)


F2 = IntegerModRing(M_w)

F3 = IntegerModRing(M_512)


n512block=F2(n)
n_gmp=F(n)

n512=F3(n)

print("n =",n,"; is_prime()", is_prime(n))

n_prime_gmp = (-n_gmp%M_GMP)**(-1)%M_GMP

print("n_prime =",n_prime_gmp)

print("check",(-n_gmp*n_prime_gmp)%M_GMP)

n_prime_512 = (-n512block)**(-1)%M_w

print("n_prime =",n_prime_512)

print("check",(-n512*n_prime_512)%M_w)

r2_512 = (M_512*M_512)%n

print("r2_512 =",r2_512)

n_prime_512 = (-n512)**(-1)%M_512

print("n_prime =",n_prime_512)

print("check",(-n512*n_prime_512)%M_512)



'''
A=int(0xE0E81CDC37C87EA737269C5B31DCC07F0B47B4B3F85DD6ED7096C2CD9B7223F7B3CA4BE472F4796A490EB6F8194B9AE8A55CA5317250FFA9BF2FAF2B88DDCA29E46441FA568B7B1E716C16917D0A0F9CB2BCB98BE2B1E8C15876C09EC11D330AA3FE96CFEAFDE4F6FFAFAE85A31CD66230F06DE4632B3222425446F48A5FC24E)
B=int(0xAD1978745F1370829EDA45E298B3E5E0DCDF77109180262CF65692EB05714D20B2D82FDFC9D822BDA9A91BA371C1F4A79BA2F6257D73B0386FE48EE0D6E7D8B3CE2EA76FBBEAC1C6952DE70E73E3E7615651925EFC20225B5A0F999B20973D037575B07B7D063E37A19EB8868575F2A26FC8059E353AB0E1385EC069EA2A62D6)

r2_gmp = (M_GMP*M_GMP)%n

for i in range(t):
	T = ((A>>(i*52))%M_w)*int(r2_512)
	print("T ="+hex(T))
	Q = (T*int(n_prime_512))%int(M_w)
	
	print("T+QN ="+hex(T+Q*n))

	T = (T+Q*n)//M_w
	print("C_gmp =",hex(T))

print("C_gmp =",hex(T))

Amont = blockmont(A,r2_512,n_prime_512,n)

print("Amont ="+hex(Amont))

Bmont = blockmont(B,r2_512,n_prime_512,n)
print("Bmont ="+hex(Bmont))

Tmont = blockmont(Bmont,Amont,n_prime_512,n)
print("Tmont ="+hex(Tmont))


Tfinal = blockmont(Tmont,1,n_prime_512,n)

print("\nTfinal ="+hex(Tfinal))



T = B*int(r2_512)

Q = (T*int(n_prime_512))%int(M_512)

C = T+Q*n


print("C_512 =",hex(C))
'''


f= open("montParam.c","w")

f.write("/*   Montgomery parameters !*/\n\n")

line = "\tmpz_set_str(modul_p, \""+str(n)+"\",10);\n"
f.write(line)

line = "\tmpz_set_str(p_prime, \""+str(n_prime_512)+"\",10);\n"
#line = "\tp_prime[0] = "+str(n_prime_512)+" ;\n"
f.write(line)


line = "\tmpz_set_str(r2_gmp_512, \""+str(r2_512)+"\",10);\n"
f.write(line)



f.close()

